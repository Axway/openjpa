29c29
< /*  59 */   protected CacheStatisticsSPI _stats = new CacheStatisticsImpl();
---
> /*  62 */   protected CacheStatisticsSPI _stats = new CacheStatisticsImpl();
31c31
< /*  61 */   private static final BitSet EMPTY_BITSET = new BitSet(0);
---
> /*  64 */   private static final BitSet EMPTY_BITSET = new BitSet(0);
33c33
< /*  63 */   private static final Localizer s_loc = Localizer.forPackage(AbstractDataCache.class);
---
> /*  66 */   private static final Localizer s_loc = Localizer.forPackage(AbstractDataCache.class);
36,41c36,41
< /*  76 */   private String _name = null;
< /*  77 */   private boolean _closed = false;
< /*  78 */   private String _schedule = null;
< /*  79 */   protected Set<String> _includedTypes = new HashSet();
< /*  80 */   protected Set<String> _excludedTypes = new HashSet();
< /*  81 */   protected boolean _evictOnBulkUpdate = true;
---
> /*  79 */   private String _name = null;
> /*  80 */   private boolean _closed = false;
> /*  81 */   private String _schedule = null;
> /*  82 */   protected Set<String> _includedTypes = new HashSet();
> /*  83 */   protected Set<String> _excludedTypes = new HashSet();
> /*  84 */   protected boolean _evictOnBulkUpdate = true;
44c44
< /*  84 */     return this._name;
---
> /*  87 */     return this._name;
48c48
< /*  88 */     this._name = name;
---
> /*  91 */     this._name = name;
51,52c51,52
< /*  91 */     if (enable == true)
< /*  92 */       this._stats.enable();
---
> /*  94 */     if (enable == true)
> /*  95 */       this._stats.enable();
56c56
< /*  96 */     this._stats.isEnabled();
---
> /*  99 */     this._stats.isEnabled();
60c60
< /* 100 */     return this._schedule;
---
> /* 103 */     return this._schedule;
64c64
< /* 104 */     this._schedule = s;
---
> /* 107 */     this._schedule = s;
68,71c68,71
< /* 108 */     if ((this._schedule != null) && (!"".equals(this._schedule))) {
< /* 109 */       ClearableScheduler scheduler = manager.getClearableScheduler();
< /* 110 */       if (scheduler != null) {
< /* 111 */         scheduler.scheduleEviction(this, this._schedule);
---
> /* 111 */     if ((this._schedule != null) && (!"".equals(this._schedule))) {
> /* 112 */       ClearableScheduler scheduler = manager.getClearableScheduler();
> /* 113 */       if (scheduler != null) {
> /* 114 */         scheduler.scheduleEviction(this, this._schedule);
74,75c74,75
< /* 114 */     if ((manager instanceof DataCacheManagerImpl)) {
< /* 115 */       List invalidConfigured = new ArrayList();
---
> /* 117 */     if ((manager instanceof DataCacheManagerImpl)) {
> /* 118 */       List invalidConfigured = new ArrayList();
77,80c77,80
< /* 117 */       if (this._includedTypes != null) {
< /* 118 */         for (String s : this._includedTypes) {
< /* 119 */           if (this._excludedTypes.contains(s)) {
< /* 120 */             invalidConfigured.add(s);
---
> /* 120 */       if (this._includedTypes != null) {
> /* 121 */         for (String s : this._includedTypes) {
> /* 122 */           if (this._excludedTypes.contains(s)) {
> /* 123 */             invalidConfigured.add(s);
83,84c83,84
< /* 123 */         if (invalidConfigured.size() > 0) {
< /* 124 */           throw new GeneralException(s_loc.get("invalid-types-excluded-types", invalidConfigured.toString()));
---
> /* 126 */         if (invalidConfigured.size() > 0) {
> /* 127 */           throw new GeneralException(s_loc.get("invalid-types-excluded-types", invalidConfigured.toString()));
87c87
< /* 127 */       ((DataCacheManagerImpl)manager).setTypes(this._includedTypes, this._excludedTypes);
---
> /* 130 */       ((DataCacheManagerImpl)manager).setTypes(this._includedTypes, this._excludedTypes);
93,94c93,94
< /* 134 */     putAllInternal(additions);
< /* 135 */     putAllInternal(newUpdates);
---
> /* 137 */     putAllInternal(additions);
> /* 138 */     putAllInternal(newUpdates);
96,97c96,97
< /* 139 */     if (recacheUpdates()) {
< /* 140 */       putAllInternal(existingUpdates);
---
> /* 142 */     if (recacheUpdates()) {
> /* 143 */       putAllInternal(existingUpdates);
100c100
< /* 145 */     removeAllInternal(deletes);
---
> /* 148 */     removeAllInternal(deletes);
102,112c102,112
< /* 147 */     if (this.log.isTraceEnabled()) {
< /* 148 */       Collection addIds = new ArrayList(additions.size());
< /* 149 */       Collection upIds = new ArrayList(newUpdates.size());
< /* 150 */       Collection exIds = new ArrayList(existingUpdates.size());
< /*     */ 
< /* 152 */       for (DataCachePCData addition : additions)
< /* 153 */         addIds.add(addition.getId());
< /* 154 */       for (DataCachePCData newUpdate : newUpdates)
< /* 155 */         upIds.add(newUpdate.getId());
< /* 156 */       for (DataCachePCData existingUpdate : existingUpdates) {
< /* 157 */         exIds.add(existingUpdate.getId());
---
> /* 150 */     if (this.log.isTraceEnabled()) {
> /* 151 */       Collection addIds = new ArrayList(additions.size());
> /* 152 */       Collection upIds = new ArrayList(newUpdates.size());
> /* 153 */       Collection exIds = new ArrayList(existingUpdates.size());
> /*     */ 
> /* 155 */       for (DataCachePCData addition : additions)
> /* 156 */         addIds.add(addition.getId());
> /* 157 */       for (DataCachePCData newUpdate : newUpdates)
> /* 158 */         upIds.add(newUpdate.getId());
> /* 159 */       for (DataCachePCData existingUpdate : existingUpdates) {
> /* 160 */         exIds.add(existingUpdate.getId());
114c114
< /* 159 */       this.log.trace(s_loc.get("cache-commit", new Object[] { addIds, upIds, exIds, deletes }));
---
> /* 162 */       this.log.trace(s_loc.get("cache-commit", new Object[] { addIds, upIds, exIds, deletes }));
119,124c119,124
< /* 164 */     DataCachePCData o = getInternal(key);
< /* 165 */     if ((o != null) && (o.isTimedOut())) {
< /* 166 */       o = null;
< /* 167 */       removeInternal(key);
< /* 168 */       if (this.log.isTraceEnabled())
< /* 169 */         this.log.trace(s_loc.get("cache-timeout", key));
---
> /* 167 */     DataCachePCData o = getInternal(key);
> /* 168 */     if ((o != null) && (o.isTimedOut())) {
> /* 169 */       o = null;
> /* 170 */       removeInternal(key);
> /* 171 */       if (this.log.isTraceEnabled())
> /* 172 */         this.log.trace(s_loc.get("cache-timeout", key));
126c126
< /* 171 */     return o != null;
---
> /* 174 */     return o != null;
130,131c130,131
< /* 175 */     if (keys.isEmpty()) {
< /* 176 */       return EMPTY_BITSET;
---
> /* 178 */     if (keys.isEmpty()) {
> /* 179 */       return EMPTY_BITSET;
133,138c133,138
< /* 178 */     BitSet set = new BitSet(keys.size());
< /* 179 */     int i = 0;
< /* 180 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
< /* 181 */       if (contains(iter.next()))
< /* 182 */         set.set(i);
< /* 183 */     return set;
---
> /* 181 */     BitSet set = new BitSet(keys.size());
> /* 182 */     int i = 0;
> /* 183 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
> /* 184 */       if (contains(iter.next()))
> /* 185 */         set.set(i);
> /* 186 */     return set;
142,151c142,151
< /* 187 */     DataCachePCData o = getInternal(key);
< /* 188 */     if ((o != null) && (o.isTimedOut())) {
< /* 189 */       o = null;
< /* 190 */       removeInternal(key);
< /* 191 */       if (this.log.isTraceEnabled())
< /* 192 */         this.log.trace(s_loc.get("cache-timeout", key));
< /*     */     }
< /* 194 */     if (this.log.isTraceEnabled()) {
< /* 195 */       if (o == null)
< /* 196 */         this.log.trace(s_loc.get("cache-miss", key));
---
> /* 190 */     DataCachePCData o = getInternal(key);
> /* 191 */     if ((o != null) && (o.isTimedOut())) {
> /* 192 */       o = null;
> /* 193 */       removeInternal(key);
> /* 194 */       if (this.log.isTraceEnabled())
> /* 195 */         this.log.trace(s_loc.get("cache-timeout", key));
> /*     */     }
> /* 197 */     if (this.log.isTraceEnabled()) {
> /* 198 */       if (o == null)
> /* 199 */         this.log.trace(s_loc.get("cache-miss", key));
153c153
< /* 198 */         this.log.trace(s_loc.get("cache-hit", key));
---
> /* 201 */         this.log.trace(s_loc.get("cache-hit", key));
156c156
< /* 201 */     return o;
---
> /* 204 */     return o;
161,164c161,164
< /* 209 */     Map resultMap = new HashMap(keys.size());
< /* 210 */     for (Iterator i$ = keys.iterator(); i$.hasNext(); ) { Object key = i$.next();
< /* 211 */       resultMap.put(key, get(key)); }
< /* 212 */     return resultMap;
---
> /* 212 */     Map resultMap = new HashMap(keys.size());
> /* 213 */     for (Iterator i$ = keys.iterator(); i$.hasNext(); ) { Object key = i$.next();
> /* 214 */       resultMap.put(key, get(key)); }
> /* 215 */     return resultMap;
168,171c168,171
< /* 216 */     DataCachePCData o = putInternal(data.getId(), data);
< /* 217 */     if (this.log.isTraceEnabled())
< /* 218 */       this.log.trace(s_loc.get("cache-put", data.getId()));
< /* 219 */     return (o == null) || (o.isTimedOut()) ? null : o;
---
> /* 219 */     DataCachePCData o = putInternal(data.getId(), data);
> /* 220 */     if (this.log.isTraceEnabled())
> /* 221 */       this.log.trace(s_loc.get("cache-put", data.getId()));
> /* 222 */     return (o == null) || (o.isTimedOut()) ? null : o;
175,176c175,176
< /* 223 */     if (recacheUpdates())
< /* 224 */       putInternal(data.getId(), data);
---
> /* 226 */     if (recacheUpdates())
> /* 227 */       putInternal(data.getId(), data);
181,186c181,186
< /* 229 */     DataCachePCData o = removeInternal(key);
< /* 230 */     if ((o != null) && (o.isTimedOut()))
< /* 231 */       o = null;
< /* 232 */     if (this.log.isTraceEnabled()) {
< /* 233 */       if (o == null)
< /* 234 */         this.log.trace(s_loc.get("cache-remove-miss", key));
---
> /* 232 */     DataCachePCData o = removeInternal(key);
> /* 233 */     if ((o != null) && (o.isTimedOut()))
> /* 234 */       o = null;
> /* 235 */     if (this.log.isTraceEnabled()) {
> /* 236 */       if (o == null)
> /* 237 */         this.log.trace(s_loc.get("cache-remove-miss", key));
188c188
< /* 236 */         this.log.trace(s_loc.get("cache-remove-hit", key));
---
> /* 239 */         this.log.trace(s_loc.get("cache-remove-hit", key));
190c190
< /* 238 */     return o;
---
> /* 241 */     return o;
194,195c194,195
< /* 242 */     if (keys.isEmpty()) {
< /* 243 */       return EMPTY_BITSET;
---
> /* 245 */     if (keys.isEmpty()) {
> /* 246 */       return EMPTY_BITSET;
197,202c197,202
< /* 245 */     BitSet set = new BitSet(keys.size());
< /* 246 */     int i = 0;
< /* 247 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
< /* 248 */       if (remove(iter.next()) != null)
< /* 249 */         set.set(i);
< /* 250 */     return set;
---
> /* 248 */     BitSet set = new BitSet(keys.size());
> /* 249 */     int i = 0;
> /* 250 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
> /* 251 */       if (remove(iter.next()) != null)
> /* 252 */         set.set(i);
> /* 253 */     return set;
207c207
< /* 257 */     removeAllInternal(cls, subClasses);
---
> /* 260 */     removeAllInternal(cls, subClasses);
211,214c211,214
< /* 261 */     boolean bool = pinInternal(key);
< /* 262 */     if (this.log.isTraceEnabled()) {
< /* 263 */       if (bool)
< /* 264 */         this.log.trace(s_loc.get("cache-pin-hit", key));
---
> /* 264 */     boolean bool = pinInternal(key);
> /* 265 */     if (this.log.isTraceEnabled()) {
> /* 266 */       if (bool)
> /* 267 */         this.log.trace(s_loc.get("cache-pin-hit", key));
216c216
< /* 266 */         this.log.trace(s_loc.get("cache-pin-miss", key));
---
> /* 269 */         this.log.trace(s_loc.get("cache-pin-miss", key));
218c218
< /* 268 */     return bool;
---
> /* 271 */     return bool;
222,223c222,223
< /* 272 */     if (keys.isEmpty()) {
< /* 273 */       return EMPTY_BITSET;
---
> /* 275 */     if (keys.isEmpty()) {
> /* 276 */       return EMPTY_BITSET;
225,230c225,230
< /* 275 */     BitSet set = new BitSet(keys.size());
< /* 276 */     int i = 0;
< /* 277 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
< /* 278 */       if (pin(iter.next()))
< /* 279 */         set.set(i);
< /* 280 */     return set;
---
> /* 278 */     BitSet set = new BitSet(keys.size());
> /* 279 */     int i = 0;
> /* 280 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
> /* 281 */       if (pin(iter.next()))
> /* 282 */         set.set(i);
> /* 283 */     return set;
234,235c234,235
< /* 284 */     if (this.log.isWarnEnabled())
< /* 285 */       this.log.warn(s_loc.get("cache-class-pin", getName()));
---
> /* 287 */     if (this.log.isWarnEnabled())
> /* 288 */       this.log.warn(s_loc.get("cache-class-pin", getName()));
239,242c239,242
< /* 289 */     boolean bool = unpinInternal(key);
< /* 290 */     if (this.log.isTraceEnabled()) {
< /* 291 */       if (bool)
< /* 292 */         this.log.trace(s_loc.get("cache-unpin-hit", key));
---
> /* 292 */     boolean bool = unpinInternal(key);
> /* 293 */     if (this.log.isTraceEnabled()) {
> /* 294 */       if (bool)
> /* 295 */         this.log.trace(s_loc.get("cache-unpin-hit", key));
244c244
< /* 294 */         this.log.trace(s_loc.get("cache-unpin-miss", key));
---
> /* 297 */         this.log.trace(s_loc.get("cache-unpin-miss", key));
246c246
< /* 296 */     return bool;
---
> /* 299 */     return bool;
250,251c250,251
< /* 300 */     if (keys.isEmpty()) {
< /* 301 */       return EMPTY_BITSET;
---
> /* 303 */     if (keys.isEmpty()) {
> /* 304 */       return EMPTY_BITSET;
253,258c253,258
< /* 303 */     BitSet set = new BitSet(keys.size());
< /* 304 */     int i = 0;
< /* 305 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
< /* 306 */       if (unpin(iter.next()))
< /* 307 */         set.set(i);
< /* 308 */     return set;
---
> /* 306 */     BitSet set = new BitSet(keys.size());
> /* 307 */     int i = 0;
> /* 308 */     for (Iterator iter = keys.iterator(); iter.hasNext(); i++)
> /* 309 */       if (unpin(iter.next()))
> /* 310 */         set.set(i);
> /* 311 */     return set;
262,263c262,263
< /* 312 */     if (this.log.isWarnEnabled())
< /* 313 */       this.log.warn(s_loc.get("cache-class-unpin", getName()));
---
> /* 315 */     if (this.log.isWarnEnabled())
> /* 316 */       this.log.warn(s_loc.get("cache-class-unpin", getName()));
267,269c267,269
< /* 317 */     clearInternal();
< /* 318 */     if (this.log.isTraceEnabled())
< /* 319 */       this.log.trace(s_loc.get("cache-clear", getName()));
---
> /* 320 */     clearInternal();
> /* 321 */     if (this.log.isTraceEnabled())
> /* 322 */       this.log.trace(s_loc.get("cache-clear", getName()));
273c273
< /* 323 */     close(true);
---
> /* 326 */     close(true);
277,280c277,280
< /* 327 */     if (!this._closed) {
< /* 328 */       if (clear)
< /* 329 */         clearInternal();
< /* 330 */       this._closed = true;
---
> /* 330 */     if (!this._closed) {
> /* 331 */       if (clear)
> /* 332 */         clearInternal();
> /* 333 */       this._closed = true;
285c285
< /* 335 */     return this._closed;
---
> /* 338 */     return this._closed;
289c289
< /* 339 */     addListener(listen);
---
> /* 342 */     addListener(listen);
293c293
< /* 343 */     return removeListener(listen);
---
> /* 346 */     return removeListener(listen);
297c297
< /* 347 */     return "[" + super.toString() + ":" + this._name + "]";
---
> /* 350 */     return "[" + super.toString() + ":" + this._name + "]";
302,303c302,303
< /* 357 */     if (this._closed) {
< /* 358 */       return;
---
> /* 360 */     if (this._closed) {
> /* 361 */       return;
305,307c305,307
< /* 360 */     if (event.getPayloadType() == 2) {
< /* 361 */       removeAllTypeNamesInternal(event.getUpdatedTypeNames());
< /* 362 */       removeAllTypeNamesInternal(event.getDeletedTypeNames());
---
> /* 363 */     if (event.getPayloadType() == 2) {
> /* 364 */       removeAllTypeNamesInternal(event.getUpdatedTypeNames());
> /* 365 */       removeAllTypeNamesInternal(event.getDeletedTypeNames());
311,312c311,312
< /* 367 */       removeAllInternal(event.getUpdatedObjectIds());
< /* 368 */       removeAllInternal(event.getDeletedObjectIds());
---
> /* 370 */       removeAllInternal(event.getUpdatedObjectIds());
> /* 371 */       removeAllInternal(event.getDeletedObjectIds());
318,319c318,319
< /* 379 */     if (hasListeners()) {
< /* 380 */       fireEvent(new ExpirationEvent(this, key, expired));
---
> /* 382 */     if (hasListeners()) {
> /* 383 */       fireEvent(new ExpirationEvent(this, key, expired));
321,322c321,322
< /* 382 */     if ((expired) && (this.log.isTraceEnabled()))
< /* 383 */       this.log.trace(s_loc.get("cache-expired", key));
---
> /* 385 */     if ((expired) && (this.log.isTraceEnabled()))
> /* 386 */       this.log.trace(s_loc.get("cache-expired", key));
327c327
< /* 392 */     return false;
---
> /* 395 */     return false;
336,337c336,337
< /* 411 */     for (DataCachePCData pc : pcs)
< /* 412 */       putInternal(pc.getId(), pc);
---
> /* 414 */     for (DataCachePCData pc : pcs)
> /* 415 */       putInternal(pc.getId(), pc);
346,347c346,347
< /* 430 */     for (Iterator i$ = oids.iterator(); i$.hasNext(); ) { Object oid = i$.next();
< /* 431 */       removeInternal(oid);
---
> /* 433 */     for (Iterator i$ = oids.iterator(); i$.hasNext(); ) { Object oid = i$.next();
> /* 434 */       removeInternal(oid);
353,360c353,360
< /* 438 */     Collection classes = Caches.addTypesByName(this.conf, classNames, null);
< /* 439 */     if (classes == null) {
< /* 440 */       return;
< /*     */     }
< /* 442 */     for (Class cls : classes) {
< /* 443 */       if (this.log.isTraceEnabled())
< /* 444 */         this.log.trace(s_loc.get("cache-removeclass", cls.getName()));
< /* 445 */       removeAllInternal(cls, false);
---
> /* 441 */     Collection classes = Caches.addTypesByName(this.conf, classNames, null);
> /* 442 */     if (classes == null) {
> /* 443 */       return;
> /*     */     }
> /* 445 */     for (Class cls : classes) {
> /* 446 */       if (this.log.isTraceEnabled())
> /* 447 */         this.log.trace(s_loc.get("cache-removeclass", cls.getName()));
> /* 448 */       removeAllInternal(cls, false);
372,374c372,374
< /* 468 */     if (StringUtils.equals(this._name, name))
< /* 469 */       return this;
< /* 470 */     return null;
---
> /* 471 */     if (StringUtils.equals(this._name, name))
> /* 472 */       return this;
> /* 473 */     return null;
379c379
< /* 477 */     return Collections.emptySet();
---
> /* 480 */     return Collections.emptySet();
383c383
< /* 481 */     return false;
---
> /* 484 */     return false;
387c387
< /* 485 */     return this._stats;
---
> /* 488 */     return this._stats;
392,393c392,393
< /* 491 */     this.conf = ((OpenJPAConfiguration)conf);
< /* 492 */     this.log = conf.getLog("openjpa.DataCache");
---
> /* 494 */     this.conf = ((OpenJPAConfiguration)conf);
> /* 495 */     this.log = conf.getLog("openjpa.DataCache");
400,401c400,401
< /* 499 */     if (this._name == null)
< /* 500 */       setName("default");
---
> /* 502 */     if (this._name == null)
> /* 503 */       setName("default");
406,407c406,407
< /* 506 */     ExpirationListener listen = (ExpirationListener)listener;
< /* 507 */     ExpirationEvent ev = (ExpirationEvent)event;
---
> /* 509 */     ExpirationListener listen = (ExpirationListener)listener;
> /* 510 */     ExpirationEvent ev = (ExpirationEvent)event;
409c409
< /* 509 */       listen.onExpire(ev);
---
> /* 512 */       listen.onExpire(ev);
411,412c411,412
< /* 511 */       if (this.log.isWarnEnabled())
< /* 512 */         this.log.warn(s_loc.get("exp-listener-ex"), e);
---
> /* 514 */       if (this.log.isWarnEnabled())
> /* 515 */         this.log.warn(s_loc.get("exp-listener-ex"), e);
417c417
< /* 517 */     return this._includedTypes;
---
> /* 520 */     return this._includedTypes;
421c421
< /* 521 */     return this._excludedTypes;
---
> /* 524 */     return this._excludedTypes;
425c425
< /* 525 */     this._includedTypes = types;
---
> /* 528 */     this._includedTypes = types;
429c429
< /* 529 */     this._includedTypes = (StringUtils.isEmpty(types) ? null : new HashSet(Arrays.asList(Strings.split(types, ";", 0))));
---
> /* 532 */     this._includedTypes = (StringUtils.isEmpty(types) ? null : new HashSet(Arrays.asList(Strings.split(types, ";", 0))));
434c434
< /* 534 */     this._excludedTypes = types;
---
> /* 537 */     this._excludedTypes = types;
438c438
< /* 538 */     this._excludedTypes = (StringUtils.isEmpty(types) ? null : new HashSet(Arrays.asList(Strings.split(types, ";", 0))));
---
> /* 541 */     this._excludedTypes = (StringUtils.isEmpty(types) ? null : new HashSet(Arrays.asList(Strings.split(types, ";", 0))));
443c443
< /* 543 */     return this;
---
> /* 546 */     return this;
447c447
< /* 547 */     return this._evictOnBulkUpdate;
---
> /* 550 */     return this._evictOnBulkUpdate;
451c451
< /* 551 */     this._evictOnBulkUpdate = b;
---
> /* 554 */     this._evictOnBulkUpdate = b;
455c455
< /* Location:           C:\Users\srybak\dev\java\projects\GI\repository\5.12.0.0.x-acf\corelib\openjpa-2.1.1-CUSTOMIZED\
---
> /* Location:           C:\Users\srybak\dev\java\projects\3rd_party_customized\openjpa\branches\2.1.1\openjpa\target\openjpa-2.1.1-AXWAY-1\
